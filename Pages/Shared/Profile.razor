@page "/Profile"
@inject BlazorServerApp.Models.TokenProvider tokenProvider

<div class="container">
    <PageTitle>Profile</PageTitle>

    <div class="row">
        <div class="col-md-12">
            <div class="row">
                <h2>Profile</h2>

                <div class="col-md-12">
                    <img src="@Picture"
                         alt="" class="img-rounded img-responsive" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <h3>@Username</h3>
                    <p>
                        <i class="bi bi-envelope"></i> @EmailAddress
                    </p>
                    <p>
                        <strong>Id Token</strong>: <span class="token">@IdToken</span
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string Username = "";
    private string EmailAddress = "";
    private string Picture = "";
    private string IdToken = "";

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;

        Username = state.User.Identity.Name ?? string.Empty;
        EmailAddress = state.User.Claims
            .Where(c => c.Type.Equals(System.Security.Claims.ClaimTypes.Email))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        Picture = state.User.Claims
            .Where(c => c.Type.Equals("picture"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        bool isAdmin = state.User.IsInRole("Administrator");
        IdToken = tokenProvider.IdToken;

        await base.OnInitializedAsync();
    }
}