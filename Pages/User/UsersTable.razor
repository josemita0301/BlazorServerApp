@page "/users"
@attribute [Authorize(Roles = "Administrator")]

@using BlazorServerApp.Models
@using BlazorServerApp.Models.Users
@using BlazorServerApp.Controllers
@using System.Security.Claims;

@inject AuthenticationStateProvider CustomAuthStateProvider
@inject NavigationManager NavManager
@inject IToastService ToastService

<AuthorizeView Roles="Administrator">
    <Authorized>
        <h2>Lista de Usuarios</h2>
        <br>
        <h6>Total de Administradores: @users.Where(u => u.Role.Equals("Administrator")).Count()</h6>
        <h6>Total de Staff: @users.Where(u => u.Role.Equals("Team")).Count()</h6>
        <h6>Total de Técnicos: @users.Where(u => u.Role.Equals("Technician")).Count()</h6>
        <br>
        <h6>Total de Creadores de Contenido: @users.Where(u => u.Role.Equals("ContentCreator")).Count()</h6>
        <h6>Total de Usuarios: @users.Where(u => u.Role.Equals("User")).Count()</h6>
        <br>
        <table class="users-table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Edad</th>
                    <th>Editar</th>
                    <th>Borrar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    if (user.Role.Equals("Administrator")) continue;

                    <tr>
                        <td>@user.Name</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.Age</td>
                        <td>
                            <button class="edit-button" @onclick="(() => EditUser(user))">Editar</button>
                        </td>
                        <td>
                            <button class="delete-button" @onclick="(() => DeleteUser(user))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
</AuthorizeView>

@code {

    #region User properties Vars n Props

    private List<User> users = new List<User>();

    public UserController userController = new UserController();
    #endregion

    #region Events

    protected override async Task OnInitializedAsync()
    {
        var authState = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
            return;
        }


        users = await userController.GetAllUsers();
    }

    private void EditUser(User user)
    {
        NavManager.NavigateTo($"/register/{user.UserId}");
    }

    private async void DeleteUser(User user)
    {
        await userController.DeleteUser(user.UserId);
        
        NavManager.NavigateTo("/users", true);

        ToastService.ShowWarning("Se ha borrado el usuario");
    }
    #endregion
}