@using BlazorServerApp.Controllers;
@using BlazorServerApp.Models.PostsModels;
@using System.Security.Claims

@inject NavigationManager NavManager
@inject IToastService ToastService

<br />
<br />
<hr />
<div class="post-container">
    @foreach (var post in posts)
    {
        <div class="post">
            <div class="post-header">
                <div class="post-title">
                    <div class="post-title" data-title="@post.CraftName">@post.CraftName</div>
                </div>
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <button class="delete-post-btn" @onclick="() => DeletePost(post.UserPostId)">Eliminar</button>
                    </Authorized>
                </AuthorizeView>
            </div>
            <div class="post-media">
                @if (!string.IsNullOrWhiteSpace(post.VideoLink))
                {
                    <iframe class="post-iframe" src="@post.VideoLink" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                }
                else if (post.Image != null && post.Image.Any())
                {
                    <img src="@post.Image.First()" alt="Post Image">
                }
                else
                {
                    <img  alt="Default Image">
                }
            </div>
            <div class="post-details">
                <p class="post-description">@post.PostDescription</p>
                <p class="post-date">@post.PublishDate</p>
                <p class="post-difficulty">Difficulty: @post.Difficulty</p>
                <p class="post-stepcount">Steps: @post.StepCount</p>
                <button class="view-post-btn" @onclick="(() => ViewPost(post.UserPostId))">Ver Post</button>

                @if (UserId != null)
                {
                    if (UserId.Equals(post.UserId))
                    {
                        <button class="view-post-btn" @onclick="(() => EditPost(post.UserPostId))">Editar Post</button>
                    }

                }
            </div>
        </div>
    }
</div>

@code {
    private string UserId { get; set; } = null;

    private List<UserPost> posts = new List<UserPost>();

    PostController postController = new PostController();

    [Parameter]
    public string EventName { get; set; }

    [Parameter]
    public string SearchTerm { get; set; }

    [Parameter]
    public string EventDate { get; set; }

    public string PostToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationState authenticationState;

        // authenticationState = await authenticationStateTask;
        // this.AuthenticationStateUser = authenticationState.User;

        // var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        // authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        // this.AuthenticationStateProviderUser = authenticationState.User;
        // var authState = authenticationState;

        // if (authState.User.Identity.IsAuthenticated)
        // {
        //     UserId = (authState.User.FindFirst(c => c.Type == ClaimTypes.Name)?.Value).ToString();
        // }


        List<UserPost> postsNotFiltered = await postController.GetAllPosts();

        if (!string.IsNullOrEmpty(EventDate))
        {
            posts = postsNotFiltered.Where(p => p.CraftName.Equals(EventDate)).ToList();
        }
        else if (!string.IsNullOrEmpty(EventName))
        {
            posts = postsNotFiltered.Where(p => p.CraftName.Equals(EventName)).ToList();
        }
        else if (!string.IsNullOrEmpty(SearchTerm))
        {
            posts = postsNotFiltered.Where(p => p.CraftName.Equals(SearchTerm)).ToList();
        }
        else
        {
            posts = postsNotFiltered;
        }

    }

    public async Task DeletePost(string postId)
    {
        var result = await postController.DeletePost(postId);

        if (result)
            ToastService.ShowSuccess("Post borrado con éxito");
        else
            ToastService.ShowError("Error al borrar el post");

        StateHasChanged();

        NavManager.NavigateTo("/", true);
    }

    public async Task EditPost(string UserPostId)
    {
        NavManager.NavigateTo($"/create-post/{UserPostId}");
    }

    public async Task ViewPost(string UserPostId)
    {
        NavManager.NavigateTo($"/view-post/{UserPostId}");
    }
}